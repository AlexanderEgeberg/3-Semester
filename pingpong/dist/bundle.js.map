{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.htm","webpack:///./src/js/ball.ts","webpack:///./src/js/index.ts","webpack:///./src/js/player.ts","webpack:///./src/js/vector.ts","webpack:///./src/scss/styles.scss"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,iBAAiB,qBAAuB,e;;;;;;;;;;;;ACAxC;AAAA;AAAA;AAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,6BAA6B,8CAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACe;;;;;;;;;;;;;ACzChB;AAAA;AAAA;AAAA;AAAA;AAAkC;AACA;AACJ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8CAAM,KAAK,8CAAM;AAC5C;AACA,2BAA2B,8CAAM,KAAK,8CAAM;AAC5C;AACA,wBAAwB,0CAAI,KAAK,8CAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;AACqB;AACtB;AACA;;;;;;;;;;;;;ACpHA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;;;;;;;;;;;;;AC/ClB;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;;;;;;;;;;;;ACXlB,iBAAiB,qBAAuB,gB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","module.exports = __webpack_public_path__ + \"index.htm\";","import { Vector } from \"./vector\";\r\nvar Ball = /** @class */ (function () {\r\n    function Ball(position, gameEngine) {\r\n        this.speed = 60;\r\n        this.size = 10;\r\n        this.position = position;\r\n        this.direction = new Vector(0.7, 1);\r\n        this.gameEngine = gameEngine;\r\n        this.height = this.size;\r\n        this.width = this.size;\r\n    }\r\n    // Update method takes care of all logic\r\n    Ball.prototype.update = function (time) {\r\n        //testing for collisions with walls -> change direction\r\n        if (this.position.x <= 0 || this.position.x >= this.gameEngine.canvasWidth - this.size)\r\n            this.direction.x *= -1;\r\n        if (this.position.y <= 0 || this.position.y >= this.gameEngine.canvasHeight - this.size)\r\n            this.direction.y *= -1;\r\n        //testing for Collision with any gameobject\r\n        this.gameEngine.objects.forEach(function (elegameobj) {\r\n        });\r\n        this.position.x += this.direction.x * this.speed * time / 1000;\r\n        this.position.y += this.direction.y * this.speed * time / 1000;\r\n    };\r\n    // draw ball on canvas\r\n    Ball.prototype.draw = function (ctx) {\r\n        ctx.fillStyle = \"#0341fc\";\r\n        ctx.fillRect(this.position.x, this.position.y, this.size, this.size);\r\n    };\r\n    // in case of any collision this method is called\r\n    Ball.prototype.onColliosion = function (other) {\r\n        // reverse direction if player collides with ball\r\n        if (other == this.gameEngine.player1) {\r\n            this.direction.x *= -1;\r\n        }\r\n        if (other == this.gameEngine.player2) {\r\n            this.direction.x *= -1;\r\n        }\r\n    };\r\n    return Ball;\r\n}());\r\nexport { Ball };\r\n","import { Vector } from \"./vector\";\r\nimport { Player } from \"./player\";\r\nimport { Ball } from \"./ball\";\r\n/*\r\n    THis is the main PONG GAME script\r\n*/\r\nvar GameEngine = /** @class */ (function () {\r\n    function GameEngine() {\r\n        // array with all gameobjects in the game - If you want more objects in the game add them to this array!\r\n        this.objects = new Array();\r\n        // kepp track of time between loops\r\n        this.date = new Date();\r\n        this.timeZero = this.date.getTime();\r\n        this.canvas = document.getElementById(\"canvas\");\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.canvasWidth = this.canvas.width;\r\n        this.canvasHeight = this.canvas.height;\r\n        // listen for keyboard input\r\n        document.addEventListener('keyup', this.keyUp.bind(this));\r\n        document.addEventListener('keydown', this.keyDown.bind(this));\r\n        //ceate gameobjects\r\n        //this.objects.push(new Framerate(new Vector(10,10)));\r\n        this.player1 = new Player(new Vector(20, 10), this, 1);\r\n        this.objects.push(this.player1);\r\n        this.player2 = new Player(new Vector(250, 10), this, 2);\r\n        this.objects.push(this.player2);\r\n        this.ball = new Ball(new Vector(this.canvasWidth / 2, this.canvasHeight / 2), this);\r\n        this.objects.push(this.ball);\r\n        this.gameLoop();\r\n    }\r\n    // keyboard event\r\n    GameEngine.prototype.keyDown = function (event) {\r\n        if (event.repeat) {\r\n            return;\r\n        }\r\n        ;\r\n        switch (event.key) {\r\n            case \"a\":\r\n                this.aKey = true;\r\n                break;\r\n            case \"q\":\r\n                this.qKey = true;\r\n                break;\r\n            case \"o\":\r\n                this.oKey = true;\r\n                break;\r\n            case \"l\":\r\n                this.lKey = true;\r\n                break;\r\n        }\r\n    };\r\n    // keyboard event\r\n    GameEngine.prototype.keyUp = function (event) {\r\n        switch (event.key) {\r\n            case \"a\":\r\n                this.aKey = false;\r\n                break;\r\n            case \"q\":\r\n                this.qKey = false;\r\n                break;\r\n            case \"o\":\r\n                this.oKey = false;\r\n                break;\r\n            case \"l\":\r\n                this.lKey = false;\r\n                break;\r\n        }\r\n    };\r\n    // a very good explanation of how rectangular collision works: https://silentmatt.com/rectangle-intersection/\r\n    GameEngine.prototype.Collide = function (a, b) {\r\n        if (a.position.x < (b.position.x + b.width) &&\r\n            (a.position.x + a.width) > b.position.x &&\r\n            a.position.y < (b.position.y + a.height) &&\r\n            a.position.y + b.height > b.position.y) {\r\n            return true;\r\n        }\r\n    };\r\n    GameEngine.prototype.CanvasCollide = function (a) {\r\n        if (a.position.x <= 0 || a.position.x >= (this.canvasWidth - 10)) {\r\n            window.location.reload();\r\n            return true;\r\n        }\r\n    };\r\n    // the main game loop\r\n    GameEngine.prototype.gameLoop = function () {\r\n        var _this = this;\r\n        // clear the screen in every update\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctx.fillStyle = \"#0bbd58\";\r\n        this.date = new Date();\r\n        this.timeNow = this.date.getTime();\r\n        var time = this.timeNow - this.timeZero;\r\n        this.timeZero = this.timeNow;\r\n        // run throght all objects\r\n        this.objects.forEach(function (element) {\r\n            //all objects are testeted for collisions on all objects\r\n            _this.objects.forEach(function (other) {\r\n                if (element !== other) {\r\n                    if (_this.Collide(element, other)) {\r\n                        element.onColliosion(other);\r\n                    }\r\n                }\r\n            });\r\n            _this.CanvasCollide(element);\r\n            //every element is updated\r\n            element.update(time);\r\n            // every element is drawn on canvas\r\n            element.draw(_this.ctx);\r\n        });\r\n        // call the main gamelop again (~60fps by default)\r\n        window.requestAnimationFrame(this.gameLoop.bind(this));\r\n    };\r\n    return GameEngine;\r\n}());\r\nexport { GameEngine };\r\n//start gameengine\r\nnew GameEngine();\r\n","var divPoints = document.getElementById(\"points\");\r\nvar canvas = document.getElementById(\"canvas\");\r\nvar Player = /** @class */ (function () {\r\n    function Player(position, gameEngine, playerNumber) {\r\n        this.speed = 40;\r\n        this.height = 30;\r\n        this.width = 10;\r\n        this.point = 0;\r\n        this.position = position;\r\n        this.gameEngine = gameEngine;\r\n        this.playerNumber = playerNumber;\r\n    }\r\n    Player.prototype.update = function (time) {\r\n        if (this.playerNumber == 1) {\r\n            if (this.gameEngine.aKey) {\r\n                //move down\r\n                this.position.y += time / 1000 * this.speed;\r\n            }\r\n            if (this.gameEngine.qKey) {\r\n                //move up\r\n                this.position.y -= time / 1000 * this.speed;\r\n            }\r\n        }\r\n        if (this.playerNumber == 2) {\r\n            if (this.gameEngine.oKey) {\r\n                //move down\r\n                this.position.y -= time / 1000 * this.speed;\r\n            }\r\n            if (this.gameEngine.lKey) {\r\n                //move up\r\n                this.position.y += time / 1000 * this.speed;\r\n            }\r\n        }\r\n    };\r\n    Player.prototype.draw = function (ctx) {\r\n        ctx.fillStyle = \"#0bbd58\";\r\n        ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\r\n        //ctx.fillText(this.point + \" points\", this.position.x, this.position.y);\r\n    };\r\n    Player.prototype.onColliosion = function (other) {\r\n        this.point++;\r\n        console.log(this.point);\r\n        var stringPoints = this.point.toString();\r\n        divPoints.innerHTML = \"Points: \" + stringPoints;\r\n    };\r\n    return Player;\r\n}());\r\nexport { Player };\r\n","var Vector = /** @class */ (function () {\r\n    function Vector(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    Vector.prototype.flipDirection = function () {\r\n        this.x = this.x * -1;\r\n        this.y = this.y * -1;\r\n    };\r\n    return Vector;\r\n}());\r\nexport { Vector };\r\n","module.exports = __webpack_public_path__ + \"bundle.css\";"],"sourceRoot":""}